"""
Script ch√≠nh ƒë·ªÉ ch·∫°y t·∫•t c·∫£ c√°c giai ƒëo·∫°n ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu phim
Ch·∫°y tu·∫ßn t·ª± t·ª´ giai ƒëo·∫°n 1 ƒë·∫øn 4

S·ª≠ d·ª•ng: python run_all_preprocessing.py
"""

import logging
import sys
import os
import time
from datetime import datetime

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('preprocessing_log.txt'),
        logging.StreamHandler(sys.stdout)
    ]
)

def run_preprocessing_stage(stage_number, script_name):
    """Ch·∫°y m·ªôt giai ƒëo·∫°n ti·ªÅn x·ª≠ l√Ω"""
    logging.info(f"="*50)
    logging.info(f"B·∫ÆT ƒê·∫¶U GIAI ƒêO·∫†N {stage_number}: {script_name}")
    logging.info(f"="*50)
    
    start_time = time.time()
    
    try:
        # Import v√† ch·∫°y module
        if stage_number == 1:
            import preprocessing_1
            preprocessing_1.main()
        elif stage_number == 2:
            import preprocessing_2
            preprocessing_2.main()
        elif stage_number == 3:
            import preprocessing_3
            preprocessing_3.main()
        elif stage_number == 4:
            import preprocessing_4
            preprocessing_4.main()
        
        end_time = time.time()
        duration = end_time - start_time
        
        logging.info(f"HO√ÄN TH√ÄNH GIAI ƒêO·∫†N {stage_number} - Th·ªùi gian: {duration:.2f} gi√¢y")
        return True
        
    except Exception as e:
        logging.error(f"L·ªñI TRONG GIAI ƒêO·∫†N {stage_number}: {str(e)}")
        return False

def check_dependencies():
    """Ki·ªÉm tra c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt"""
    logging.info("Ki·ªÉm tra dependencies...")
    
    required_packages = [
        'pandas', 'numpy', 'requests', 'bs4', 'matplotlib'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            logging.info(f"‚úì {package} - OK")
        except ImportError:
            missing_packages.append(package)
            logging.error(f"‚úó {package} - THI·∫æU")
    
    if missing_packages:
        logging.error(f"C·∫ßn c√†i ƒë·∫∑t c√°c package: {', '.join(missing_packages)}")
        logging.error("Ch·∫°y l·ªánh: pip install " + " ".join(missing_packages))
        return False
    
    logging.info("T·∫•t c·∫£ dependencies ƒë√£ s·∫µn s√†ng!")
    return True

def create_directories():
    """T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt"""
    logging.info("T·∫°o th∆∞ m·ª•c datasets n·∫øu ch∆∞a c√≥...")
    
    datasets_dir = '../datasets'
    if not os.path.exists(datasets_dir):
        os.makedirs(datasets_dir)
        logging.info(f"ƒê√£ t·∫°o th∆∞ m·ª•c: {datasets_dir}")
    else:
        logging.info(f"Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i: {datasets_dir}")

def main():
    """H√†m ch√≠nh ch·∫°y t·∫•t c·∫£ c√°c giai ƒëo·∫°n ti·ªÅn x·ª≠ l√Ω"""
    start_time = datetime.now()
    logging.info(f"B·∫ÆT ƒê·∫¶U QU√Å TR√åNH TI·ªÄN X·ª¨ L√ù D·ªÆ LI·ªÜU PHIM - {start_time}")
    logging.info("="*70)
    
    # Ki·ªÉm tra dependencies
    if not check_dependencies():
        logging.error("Kh√¥ng th·ªÉ ti·∫øp t·ª•c do thi·∫øu dependencies")
        sys.exit(1)
    
    # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
    create_directories()
    
    # Danh s√°ch c√°c giai ƒëo·∫°n
    stages = [
        (1, "preprocessing_1.py - X·ª≠ l√Ω d·ªØ li·ªáu c∆° b·∫£n"),
        (2, "preprocessing_2.py - X·ª≠ l√Ω d·ªØ li·ªáu TMDB 2017"),
        (3, "preprocessing_3.py - X·ª≠ l√Ω d·ªØ li·ªáu Wikipedia 2018-2019"),
        (4, "preprocessing_4.py - X·ª≠ l√Ω d·ªØ li·ªáu 2020 v√† ho√†n thi·ªán")
    ]
    
    successful_stages = 0
    failed_stages = []
    
    # Ch·∫°y t·ª´ng giai ƒëo·∫°n
    for stage_num, description in stages:
        success = run_preprocessing_stage(stage_num, description)
        
        if success:
            successful_stages += 1
            logging.info(f"‚úì Giai ƒëo·∫°n {stage_num} th√†nh c√¥ng")
        else:
            failed_stages.append(stage_num)
            logging.error(f"‚úó Giai ƒëo·∫°n {stage_num} th·∫•t b·∫°i")
            
            # H·ªèi c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng
            user_input = input(f"Giai ƒëo·∫°n {stage_num} th·∫•t b·∫°i. Ti·∫øp t·ª•c? (y/n): ")
            if user_input.lower() != 'y':
                logging.info("Ng∆∞·ªùi d√πng ch·ªçn d·ª´ng qu√° tr√¨nh")
                break
    
    # T·ªïng k·∫øt
    end_time = datetime.now()
    total_duration = end_time - start_time
    
    logging.info("="*70)
    logging.info("T·ªîNG K·∫æT QU√Å TR√åNH TI·ªÄN X·ª¨ L√ù")
    logging.info("="*70)
    logging.info(f"Th·ªùi gian b·∫Øt ƒë·∫ßu: {start_time}")
    logging.info(f"Th·ªùi gian k·∫øt th√∫c: {end_time}")
    logging.info(f"T·ªïng th·ªùi gian: {total_duration}")
    logging.info(f"S·ªë giai ƒëo·∫°n th√†nh c√¥ng: {successful_stages}/{len(stages)}")
    
    if failed_stages:
        logging.error(f"C√°c giai ƒëo·∫°n th·∫•t b·∫°i: {failed_stages}")
    
    if successful_stages == len(stages):
        logging.info("üéâ T·∫§T C·∫¢ C√ÅC GIAI ƒêO·∫†N HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
        logging.info("Dataset cu·ªëi c√πng: ../datasets/movies_final_preprocessed.csv")
    else:
        logging.warning("‚ö†Ô∏è  M·ªôt s·ªë giai ƒëo·∫°n ch∆∞a ho√†n th√†nh")
    
    logging.info("="*70)

if __name__ == '__main__':
    main() 